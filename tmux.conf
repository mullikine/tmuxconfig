# vim: ft=tmux:

# DONE Get this working for tmux 3.3
# I just need to comment/uncomment sections with tmux3.3
# Unfortunately, tmux3.3's window and session selection has completely changed and is no longer a good design
# For this reason, I tmux3.3 is completely unusable
# tmux2 style is much better

# Free bindings
# cat $MYGIT/config/tmux/tmux.conf | grep -v -P "^#" | scrape "C-M-[^ ]+" | sort | uniq | v
# C-M-a -- this is used to go to the top of code nesting
# C-M-c
# C-M-g -- this is used in zsh though
# C-M-t -- used for grep
# C-M-x -- i was planning on making this a terminal automation menu, like 'M-$'
# C-M-] -- this is help in emacs
# C-M-@ -- this is used as the current mode prefix for emacs

# Desired but not able to send:
# SCLK
# PAUS
# PRSC
# HELP
# INS

# I think INS is M-TAB?

# DONE: make - sh-general

## * Custom variables are possible apparently
## set -g @continuum-boot 'on'

# IMPORTANT -- use unbuffer so that stdin and stdout are closed when
# starting
# bind 'y' run -b "unbuffer tm nw"

# bind -n C-M-E neww -n tmux-config "tmux-vim-config.sh"
# bind M-E neww -n "edit config..." "tmux-vim-config.sh"
# I don't think this clashes anymore. And who cares anyway.
#bind M-T neww -n "find-in-project..." "tmux-project-grep.sh" # clashes with zsh


# This is how I should get the TMUX_PANE in run
# bind M-Space run 'tmux neww "TMUX_PANE=$(tpn) tmux-next-layout-ask.sh"'

# Interestingly
# F1 M-Space cycles through layouts.
# I should disable this or bind it to something else
# Hmm. I use this sometimes though. Unfortunately, it's accidentally
# pressed sometimes. Therefore, I should make an 'are you sure'?

# unbind M-Space

# As it turns out, I don't get a TMUX_PANE from run
# bind M-Space run 'ns "hi$TMUX_PANE"'

# free/spare bindings:
# bind C run "tmux-neww-run.sh 'cscope; echo cscope finished; pak' 1>/dev/null 2>/dev/null"
# bind <
#bind * command-prompt -p ssh_target "set set-remain-on-exit on; neww -n '%1' \"ssh %1\"; set set-remain-on-exit off"
#bind M-d neww -n find-window "tmux-find-run-command.sh"
# bind ^ run "tmux-subsession-ask.sh"
# free emacs/terminal keys
    # C-M-z
#bind B neww -d 'big-xterm-session.sh'


# no longer spare
#bind M-s neww -n "todayfile?" "tmux-todayfile.sh"

# old bindings
#bind J neww 'editor.sh ~/.tmux.conf'

# tmux-tmux-code git commit 648ce2f

# set -g display-time 2000
# set -g display-time 500
# set -g display-time 100

# Actually I want it to disappear immedately
set -g display-time 10

set -g allow-rename off

set -g buffer-limit 30
set -g set-titles on
set -g set-titles-string "#h #S"
set -g renumber-windows on
set -g word-separators " -_@:=.;()[]/\\{}\"\',"

set -g history-limit 100000
#set -g default-shell '/home/shane/local/bin/zsh'
#set -g default-shell '/bin/bash'
#set -g default-shell '/usr/bin/zsh'

# This makes tmux a lot faster
# Annoyingly, this runs as a login shell. Bash won't.
set -g default-shell '/bin/sh'
# set -g default-shell '/bin/bash --norc'
# TMUX= tmux new sh

set -g set-clipboard on
set-environment -g ENV "$HOME/.dashrc"
set -g default-terminal "screen-256color"
setenv -u -g COLUMNS
setenv -u -g LINES
#set -g status-utf8 on # tmux 2.0

set -g mouse on # tmux 2.3

## obsolete since 2015
#set -g mouse-resize-pane on # incompatible with select-window in 1.5
#set -g mouse-select-pane on
#set -g mouse-select-window on
#setw -g c0-change-interval 200  #nicm is going to make a new solution
#setw -g c0-change-trigger 50

# Don't upgrade yet
## mouse mode on
## don't want it on.
#set -g mouse on
#setw -g mode-mouse off
#setw -g mode-mouse copy-mode # this stopped working?? what did it do?
##defaults
##bind -n   MouseDown1Pane select-pane -t=; send-keys -M
##bind -n MouseDown1Status select-window -t=
##bind -n   MouseDrag1Pane copy-mode -M
##bind -n MouseDrag1Border resize-pane -M
#
## mouse mode off
#unbind -n MouseDrag1Pane
#unbind -temacs-copy MouseDrag1Pane

set -g base-index 1
set -g status-interval 30
set -g status-left-length 40
set -g status-right-length 40
# set -g pane-border-bg default
#set -g pane-active-border-bg black

# tmux2.1
set -g pane-border-bg black
set -g pane-border-fg colour234
set -g pane-active-border-bg default
set -g pane-active-border-fg colour234
set -g pane-active-border-bg colour234

# tmux3.3
# set -g pane-border-style bg=black,fg=colour234
# set -g pane-active-border-style fg=colour234,bg=colour234

set -g status-right ""
# set -g status-left 'F1 #S '
set -g status-left '[ #S ]  '
set -g mode-keys emacs # overrides EDITOR
# set -g escape-time 1000 # speed up vim (increase on very slow connections) and timeoutlen in vimrc
# set -s -g escape-time 0
# set -s -g escape-time 100 # This is super nice but I want it slow so I will not put up with relying on using the escape key
# set -s -g escape-time 1000
# Unfortunately, some terminal editors such as liquid don't let me to roll the meta key so the escape delay is hell, so I'm setting it to 100 again
set -s -g escape-time 100
# set -s -g escape-time 0

# Need CWD for the event the session directory is deleted and remade
set -g update-environment "TMUX_NOTES CWD TMUX_PROJECT PYTHONPATH PATH DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY" #LC_TYPE LANG PAGER TMUX
#set -g lock-command "PERL5LIB=/usr/share/perl5/vendor_perl asciiquarium"
# fine to loave this on
#set -g lock-command "tmux-screensaver.sh &>/dev/null"
#set -g lock-command "$MYGIT/pipes.sh/pipes.sh -f 100 -s 15 -r 20 -p 2 -t 3"
# set -g lock-command "img2txt --gamma=2.5 $BULK/misc/clear.png; pak"

# I only want this to be set for localhost
# set -g lock-command "pipes.sh -f 100 -s 15 -r 20 -p 2 -t 3"

#set -g lock-command "$MYGIT/pipes.sh/pipes.sh -f 100 -s 15 -r 20 -p 3 -t 3"
#set -g lock-command "$MYGIT/pipes.sh/pipes.sh -f 100 -s 15 -r 20 -p 9 -t 7"
# This will make all sessions start asciiquarium, which is
# unacceptable.
#set -g lock-after-time 5000
#set -g lock-server on

# 160 0xa0 red
# 124 0x7c dark red
# 233 0xe9 dark grey
# 234 0xea 'not as dark' grey
# 235 0xeb 'just readable' grey
# 236 0xec 'more clearly readable' grey
# 244 0xf4 light grey
# 250 0xfa lighter grey        regular windows
# 254 0xfe almost white        subsession window-name
#set -g message-bg black

# tmux2.1
set -g message-bg default
set -g message-fg colour134
set -g status-right-fg colour124
set -g status-left-fg colour124

# tmux3.3
# set -g message-style bg=default,fg=colour134
# set -g status-right-style fg=colour124
# set -g status-left-style fg=colour124

set -g status-bg black
set -g window-status-format "#[fg=colour244]#I #[fg=colour240]#W"
set -g window-status-current-format "#[fg=colour254]#I #[fg=colour134]#W"

#set -g status-bg default
set -g window-status-format "#I #W"
#set -g window-status-current-format "#I #[fg=colour237]#[bg=colour078]#W"
#set -g window-status-current-format "#I #[fg=colour237]#[bg=colour105]#W"
#set -g window-status-current-format "#[bg=colour063]#[fg=colour255]#I #[bg=default]#[fg=default]#W"
# set -g window-status-current-format "#[reverse]#I #W#[noreverse]"

setw -g other-pane-width 81
setw -g other-pane-height 30
setw -g clock-mode-colour colour234
setw -g clock-mode-style 24
#setw -g window-status-fg colour234


# tmux 2.1
setw -g mode-bg colour25
setw -g mode-fg colour254
setw -g window-status-fg colour240
setw -g window-status-current-fg white

# tmux3.3
# setw -g mode-style bg=colour25
# setw -g window-status-style fg=colour240
# setw -g window-status-current-style fg=white

setw -g alternate-screen on
setw -g word-separators ' -_@/()'
#setw -g utf8 on
setw -g automatic-rename off
setw -g xterm-keys on
setw -g aggressive-resize on

# I don't know why this is necessary
# set aggressive-resize on

set -g prefix "F1"


bind ! run 'tm breakp'
bind M-! run -b 'tm breakp -other'
bind M-b run -b 'tm breakp -reserve'
bind M-B run -b 'tm breakp -save'
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

bind F1 send-prefix #depth 2
bind -n F2 send-prefix #depth 2
bind -n F3 send F2 #depth 3
bind -n F4 send F3 #depth 4
bind -n F5 send F4 #depth 5
bind -n F6 send F5 #depth 6
bind -n F7 send F6 #depth 7
bind -n F8 send F7 #depth 8
bind -n F9 send F8 #depth 9
bind -n F10 send F9 #depth 10
bind -n F11 send F10 #depth 11
bind -n F12 send F11 #depth 12


# This no longer works in tmux2.1
# bind -n F3 send-prefix \; send-prefix #depth 3
# bind -n F4 send-prefix \; send-prefix \; send-prefix #depth 4
# bind -n F5 send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 5
# bind -n F5 send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 5
# bind -n F6 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 6
# bind -n F7 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 7
# bind -n F8 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 8
# bind -n F9 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 9
# bind -n F10 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 10
# bind -n F11 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 11
# bind -n F12 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 12

bind i run -b "tm copy-pane-name"
bind I run -b "tm copy-pane-id"

#bind K neww 'vimdiff ~/.vimrc ~/.tmux-copy-mode-vimrc'
bind K run "tmux detach-client -s \"$(tmux display-message -p '#{session_name}')\""

#bind -n M-F10 send-keys "Escape" \; send-keys -l "[21;3~"

# $BULK/source/tarball/xterm-278/xtermcap.c
# exception: Home Key is HOME in tmux but HOM in xtermcap
# /usr/share/X11/xkb/symbols/pc
# these actually send C-Up etc because C is still held down. How to
# avoid this?
bind C-M-k send-keys "C-M-k"
bind -n C-M-k send-keys "Up"
bind C-M-j send-keys "C-M-j"
bind -n C-M-j send-keys "Down"
bind C-M-h send-keys "C-M-h"
bind -n C-M-h send-keys "Left"
bind C-M-l send-keys "C-M-l"
bind -n C-M-l send-keys "Right"
# Swapped the order of these. It just feels right having home as C-M-y
bind C-M-b send-keys "C-M-b"
bind -n C-M-b send-keys "END" # Can already use Fn-Right
bind C-M-y send-keys "C-M-y"
# bind -n C-M-g send-keys "HELP"
# bind -n C-M-g send-keys -l "HELP" # bind with emacs translation map
# instead because this is not possible
bind -n C-M-y send-keys "HOME" # Can already use Fn-Left
#bind -n C-M-h send-keys "END" # Can already use Fn-Right
#bind -n C-M-l send-keys "HOME" # Can already use Fn-Left
bind C-M-i send-keys "C-M-i"
bind -n C-M-i send-keys "IC" # Insert key. See xterm-278/xtermcap.c
bind C-M-u send-keys "C-M-u"
bind -n C-M-u send-keys "DC" # Delete key. See xterm-278/xtermcap.c
bind C-M-p send-keys "C-M-p"
bind -n C-M-p send-keys "Pageup"
bind C-M-n send-keys "C-M-n"
bind -n C-M-n send-keys "Pagedown"
bind C-M-o send-keys "C-M-o"
bind -n C-M-o send-keys "BSpace" # backspace

# Shift doesn't work like this unfortunately (it's the same binding
# as without shift)
#bind -n C-M-K send-keys Up Up Up
#bind -n C-M-J send-keys Down Down Down
#bind -n C-M-H send-keys Left Left Left
#bind -n C-M-L send-keys Right Right Right
bind -n C-M-Up run "tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up"
bind -n C-M-Down run "tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down"
bind -n C-M-Left run "tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left"
bind -n C-M-Right run "tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right"

# this sort of way doesn't really work and breaks other things
#bind -n C-M-k run "xdotool keyup control;xdotool key up;xdotool keydown control"
#bind -n C-M-j run "xdotool keyup control;xdotool key down;xdotool keydown control"
#bind -n C-M-h run "xdotool keyup control;xdotool key left;xdotool keydown control"
#bind -n C-M-l run "xdotool keyup control;xdotool key right;xdotool keydown control"
#bind -n C-M-p run "xdotool keyup control;xdotool key pageup;xdotool keydown control"
#bind -n C-M-n run "xdotool keyup control;xdotool key pagedown;xdotool keydown control"

bind -n C-Up send-keys "up"
bind -n C-Down send-keys "down"
bind -n C-Left send-keys "left"
bind -n C-Right send-keys "right"

# these only fall through one level of tmux. already catching in vim (so
# already falls through all nested tmux, which is good. therefore,
# disable this
#bind -n M-F1 send F1
#bind -n M-F2 send F2

# This doesn't work
#bind -n M-F3 run "tmux-receive-xclip-full.sh" \; paste-buffer
#bind -n M-F3 run "bash -c \"tmux-receive-xclip.sh; tmux paste-buffer\""

## this seems to work more often?
# bind -n M-F3 run "tm xp"
bind -n M-F3 run "tm-xp"

## Need a version that can paste from remote clipboard
bind M-F4 run "tm xp"
## -n M-F5 is used in vim to kill a buffer and close the window
#bind -n M-F5 run "tmux-receive-xclip-unminimise.sh" \; paste-buffer -r -p

# Don't do this. It broke buffer delete. DISCARD: Not sure what the consequences of this is yet
# bind -n M-F4 run "tm xp -u"
bind -n M-F4 send M-F4

bind -n M-F5 run "tm xp -u"
# bind -n M-F5 run "tmux-receive-xclip-unminimise.sh" \; paste-buffer -r -p

# DISCARD OK, above seems to work now, but I want M-F5 for vim's number thing.
#bind -n M-F5 send M-F5
bind -n M-F6 send M-F6
bind -n M-F7 send M-F7
bind -n M-F8 send M-F8
#bind -n M-F9 send M-F9
# bind -n M-F10 send M-F10
# bind -n M-F11 send M-F11
bind -n M-F12 send M-F12
bind F1 send F1
bind F2 send F2
bind F3 send F3
bind F4 send F4
bind F5 send F5
bind F6 send F6
bind F7 send F7
bind F8 send F8
bind F9 send F9
bind F10 send F10
bind F11 send F11
bind F12 send F12

#bind -n M-1 send F1
# set -g prefix2 "M-1"
# set -u -g prefix2

# This actually messes up a lot of keys. I can't do this.
#bind -n M-2 send F1
#bind -n M-3 send F2
#bind -n M-4 send F3
#bind -n M-5 send F4
#bind -n M-6 send F5
#bind -n M-7 send F6
#bind -n M-8 send F7
#bind -n M-9 send F8


# # To make the touchbar mac at least usable
# # But now I can't do M-F1. Repeat for meta.
# # Or M-F3
# # Also, when in vim, I can't use the meta key before things like )
# # I used to select a word using M-)
# # Therefore, I must disable these when they are no longer needed.
# set -g prefix2 "M-!"
# #set -u -g prefix2
# bind -n M-@ send F1
# bind -n 'M-#' send F2
# # bind -n 'M-#' run "tm xp"
# bind -n 'M-$' send F3
# bind -n M-% send F4
# bind -n M-^ send F5
# bind -n M-& send F6
# bind -n M-* send F7
# bind -n M-( send F8
# bind -n M-) send F9
# bind M-! send "M-F1"
# bind M-@ send "M-F2"
# # bind 'M-#' send "M-F3"
# bind 'M-#' run "tm xp"
# bind 'M-$' send "M-F4"
# bind M-% send "M-F5"
# bind M-^ send "M-F6"
# bind M-& send "M-F7"
# bind M-* send "M-F8"
# bind M-( send "M-F9"
# bind M-) send "M-F10"


#tmux unbind -n M-2; tmux unbind -n M-3; tmux unbind -n M-4; tmux unbind -n M-5; tmux unbind -n M-6; tmux unbind -n M-7; tmux unbind -n M-8; tmux unbind -n M-9;


# My own patch
# This fixes the S-F keys
# I don't know if these are important
# bind -n F13 send S-F1
# bind -n F14 send S-F2
# bind -n F15 send S-F3
# bind -n F16 send S-F4
# bind -n F17 send S-F5
# bind -n F18 send S-F6
# bind -n F19 send S-F7
# bind -n F20 send S-F8
# bind -n F21 send S-F9
# bind -n F22 send S-F10
# bind -n F23 send S-F11
# bind -n F24 send S-F12


# Why are shifts not working?
# But M-S are
bind -n S-F1 send S-F1
bind -n S-F2 send S-F2
bind -n S-F3 send S-F3
bind -n S-F4 send S-F4
bind -n S-F5 send S-F5
bind -n S-F6 send S-F6
bind -n S-F7 send S-F7
bind -n S-F8 send S-F8
bind -n S-F9 send S-F9
bind -n S-F10 send S-F10
bind -n S-F11 send S-F11
bind -n S-F12 send S-F12
bind -n M-S-F1 send M-S-F1
bind -n M-S-F2 send M-S-F2
bind -n M-S-F3 send M-S-F3
bind -n M-S-F4 send M-S-F4
bind -n M-S-F5 send M-S-F5
bind -n M-S-F6 send M-S-F6
bind -n M-S-F7 send M-S-F7
bind -n M-S-F8 send M-S-F8
bind -n M-S-F9 send M-S-F9
bind -n M-S-F10 send S-F10
bind -n M-S-F11 send S-F11
bind -n M-S-F12 send S-F12
bind r run "tm refresh"
# I have successfully cleared the pane completely by killing the
# process so the tmux pane says 'pane is dead' and then repsawning the
# window. Apparently there is no straight-forward way to kill the
# processa tmux pane without closing the pane. Therefore, repspawn the
# pane as a command that will end straight away and then respawn the
# pane as the original command. Make script for this.

# this script is great but it captures all the keys leading up to it
# actually respawning, which is not ideal. find how to fix this. until
# then, use the original method.
bind e respawn-pane -k
bind '$' command-prompt "rename-session \"%%\""
bind ',' command-prompt "rename-window \"%%\""
bind 0 selectw -t :10 \; refresh
bind 1 selectw -t :1 \; refresh
bind 2 selectw -t :2 \; refresh
bind 3 selectw -t :3 \; refresh
bind 4 selectw -t :4 \; refresh
bind 5 selectw -t :5 \; refresh
bind 6 selectw -t :6 \; refresh
bind 7 selectw -t :7 \; refresh
bind 8 selectw -t :8 \; refresh
bind 9 selectw -t :9 \; refresh
# bind 0 selectw -t :10 \; refresh \; run "tmux-activate-current.sh"
# bind 1 selectw -t :1 \; refresh \; run "tmux-activate-current.sh"
# bind 2 selectw -t :2 \; refresh \; run "tmux-activate-current.sh"
# bind 3 selectw -t :3 \; refresh \; run "tmux-activate-current.sh"
# bind 4 selectw -t :4 \; refresh \; run "tmux-activate-current.sh"
# bind 5 selectw -t :5 \; refresh \; run "tmux-activate-current.sh"
# bind 6 selectw -t :6 \; refresh \; run "tmux-activate-current.sh"
# bind 7 selectw -t :7 \; refresh \; run "tmux-activate-current.sh"
# bind 8 selectw -t :8 \; refresh \; run "tmux-activate-current.sh"
# bind 9 selectw -t :9 \; refresh \; run "tmux-activate-current.sh"

# -p 38
bind P run -b "tm -te -d spv -n notes.txt -fa e c sidenotes.org"
bind E run -b "tm -te -d nw -n notes.txt -fa e c notes.txt"

#bind @ run -b "tm sel localhost:glossary.txt"
bind @ run -b "tm sel localhost:glossary"

bind '#' run -b "tm sel localhost:templates.sh"

bind T run -b "tm select-subsession"

# create new subsession?
bind t run -b "tm subsession"

# I miss seeing the indices
bind q display-panes \; run -b "tm -d pane-status -nw"
bind Q run -b "tm -d -t sps \"sh-pane \$(tpn)\""


#bind Q command-prompt -p 'man what?' "neww -n 'man-%1' -t 'man:' 'man %1'; setw remain-on-exit on"
#bind q display-panes \; run "bash -c \"tmux-pane-status.sh | sponge >(cat) | tmux-neww-run-stdin.sh \\\"cat | vim -\\\"\""
#bind q display-panes \; run "tmux-pane-status.sh | pipe-to-tmux-vim.sh"
#bind q run "tmux-pane-status.sh | tmux-neww-run-stdin.sh 'ecn -n tmux' 1>/dev/null 2>/dev/null;"

bind m last-window \; refresh
bind s choose-session \; refresh
bind w choose-window \; refresh

bind M-W neww -n "ws document..." "tmux-ws-document.sh"

# tmux 2.1
#incompatible with tmux3.3
bind \ run -b "tm edit-file"

bind PgUp neww
bind PgDn neww
bind Home neww
bind End neww

bind -r C-k resize-pane -U 2
bind -r C-j resize-pane -D 2
bind -r C-h resize-pane -L 4
bind -r C-l resize-pane -R 4
bind -r M-Up resize-pane -U 10
bind -r M-Down resize-pane -D 10
bind -r M-Left resize-pane -L 10
bind -r M-Right resize-pane -R 10
bind -r o select-pane -t :.+

bind W command-prompt -I 'Be careful ' -p 'warning:' "neww -n 'Warning' \"echo '%1'|less\"; setw window-status-format '#[fg=colour244]#I #F#[fg=colour226]#W'"
bind X unlinkw

bind G neww 'magit'
# bind G run -b "tm sel localhost_current_mygit:"

# bind S run -b 'tm monitor'

# TODO Make it so if there is a pane specification in the clipboard, use that
bind -r S run 'tm-swap-pane-from-last-window'
bind -r M-S run 'tm-swap-pane-from-last-window -s'
bind -r O run 'tm-swap-last-pane-this-window'
bind -r M-O run 'tm-swap-last-pane-this-window'
# bind -r O run 'tmux lastp; target=$(tmux lsp | grep -Po "^[^:]+(?=.*active)"); tmux lastp; tmux swapp -s "$target"'

# This isn't safe
# bind -r C-q run 'stopemacsdaemon;killall -u $USER autossh ssh sshd tmux "tmux: server"'
#bind C-q run '$VAS/projects/scripts/split-and-fzf-select-vim.sh'

# I want zsh's version to work
#bind -n C-q run '$VAS/projects/scripts/split-and-fzf-select-vim.sh'

## Unfortulately, can't start with a ranger command such as filter or
## flat
#bind C-M-q run '$VAS/projects/scripts/split-and-ranger-notes-flat-1.sh'
#bind -n C-M-q run '$VAS/projects/scripts/split-and-ranger-notes-flat-1.sh'

# bind -n M-Q neww sh-general
# I need to set stty stop undef etc because I am not going through 'tm'
bind -n M-Q new-window -n "sh-general" "stty stop undef; stty start undef; sh-general"
bind - new-window -n "sh-general" "stty stop undef; stty start undef; sh-general"
bind M-L run -b "tm copy-previous-line"
# open "$(xc -)"

#bind -n C-M-q neww -n "find-in-project..." "tmux-vim-project-search.sh"
#bind M-Q neww -n "find-in-project..." "tmux-vim-project-search.sh"

# tmux3.3
unbind -t emacs-copy M-R
bind -t emacs-copy M-e bottom-line
bind -t emacs-copy M-t top-line


bind -n C-l send "C-l" \; clear-history

bind \; command-prompt
bind : last-pane
# bind ` run "tm calc"
bind ` split-window -v sh-tmux
bind '~' run "tm wolfram-alpha"

# bind M-w run -b "tm search-command-copy"
# bind M-c command-prompt -p "copy from:" "run 'tmux-copy-remote.sh %1'"
bind M-w run -b "tm copy-pane-command"
bind M-c run -b "tm copy-pane-command -nc"
bind '[' copy-mode
bind v run "tm xv"
bind c run "tm xc"
bind C-n run "tm pastekeys"
bind C-v run -b "tm remote-xclip -r"
bind Z run -b "tm typeclip -j"
bind z run -b "tm edit-paste"
bind M-e run -b "tm editsession"
bind C-e neww "tm nw 'tm editbuffer'"
bind -n KPEnter send-keys "Enter"
bind F run -b "find-text-in-terminals"

bind > neww -n find-content "printf -- \"%s\\n\" \"search-recent-files-for-something.sh \" | rtcmd"

bind M-i run -b "tm -d -te nw -n mru» -fa tm mru"

# this starts much faster
bind f run -b "tm find-window-from-session -no-activate"
# than this
#bind f neww -n find-window tmux-ask-find-window.sh
# -r means repeat
#bind -r & kill-window
bind -r & run 'tmux-kill-window.sh'
bind M-6 run -b "tm kill-subsessions"
bind M-7 run -b "tm kill-subsession"
bind M-h run -b "tm base-here"
bind M-l run -b "tm base-localhost"
bind M-t run -b "tm omni-session"
unbind -n C-S-Left
unbind -n C-S-Right
bind -r C-S-Left swap-window -t -1
bind -r C-S-Right swap-window -t +1
bind ? run -b "tm list-keybindings"

bind M-/ run -b "show-vim-mappings"

bind + run 'tmux neww -n "#W" "#{pane_start_command}"'

# bind -n F14 neww -n "ff-slmenu-gdb" "ff-slmenu -p gdb"
# bind -n S-F2 neww -n "ff-slmenu-gdb" "ff-slmenu -p gdb"


# Fixes emacs cursor in a nested tmux session
set -ag terminal-overrides ',screen*:cvvis=\E[34l\E[?25h'

# This helps -- I think?
bind -n MouseDown2Status send-keys -M
bind -n MouseUp2Status send-keys -M
bind -n MouseDrag2Status send-keys -M
bind -n MouseDown3Status send-keys -M
bind -n MouseUp3Status send-keys -M
bind -n MouseDrag3Status send-keys -M
bind -n WheelUpStatus send-keys -M
bind -n WheelDownStatus send-keys -M

bind -n C-MouseDown2Status send-keys -M
bind -n C-MouseUp2Status send-keys -M
bind -n C-MouseDrag2Status send-keys -M
bind -n C-MouseDown3Status send-keys -M
bind -n C-MouseUp3Status send-keys -M
bind -n C-MouseDrag3Status send-keys -M
bind -n C-WheelUpStatus send-keys -M
bind -n C-WheelDownStatus send-keys -M

bind -n S-MouseDown2Status send-keys -M
bind -n S-MouseUp2Status send-keys -M
bind -n S-MouseDrag2Status send-keys -M
bind -n S-MouseDown3Status send-keys -M
bind -n S-MouseUp3Status send-keys -M
bind -n S-MouseDrag3Status send-keys -M
bind -n S-WheelUpStatus send-keys -M
bind -n S-WheelDownStatus send-keys -M

bind '"' run -b "tm -f -d sph"
bind "M-'" run -b "tm -f -d sph -tpwd"
bind 'M-"' run -b "tm -f -d spv -tpwd"
bind "'" run -b "tm open-files"
bind M-q run -b "tm open-dirs"

bind M-H run -b "tm -f -d sph"
# bind M-S run -b "tm -f -d spv -tpwd"
bind '%' run -b "tm -f -d spv"
bind y run -b "tm -f -d nw"
bind x run -b 'tm -f kp'
bind -r 'p' run -b 'tm prw'
bind -r 'n' run -b 'tm nxw'

# bind M-S run -b "tm edit-fsnotes"
# bind Space run -b "tm get-fsnotes"
bind Space run -b "tm -d sps slmenu"

# bind M-H run -b "tm -d -te sph"
# bind "'" run -b "tm find-path-from-notes"


bind = run 'tm lw'
# unbind n
# unbind p
# bind n run -b 'tm nxtw'
# bind p run -b 'tm prvw'
# bind -r n run -b 'tm -d nxtw'
# bind -r p run -b 'tm -d prvw'
bind n next-window
bind p previous-window

# bind M-g run -b 'tm run-debug-windows' # Not a very useful command

# This should, perhaps, run hydra. Or I could use a shell script -- use
# a shell script instead of hydra for the moment..
bind M-g run -b 'tm goto'

# bind L run -b "tm lock"

# Copy the last url -- useful for PRs
bind L run -b "tm lasturl"

bind g run -b "tm sel localhost_ws_google:google.txt || unbuffer nw orspv $NOTES/google.org"
bind -n M-F11 run -b "tm sel localhost:bpython3"
bind B run -b "tm sel localhost:bpython3"

# bind H command-prompt "select-window -t '%%'"

bind H run -b "tm command-history"
bind R run -b "tm recent-isues"

bind M-m neww 'magit'

# C-M-E isn't a binding that will work, sadly. tmux treats it the same
# as C-M-e. I need to find a new binding.
unbind -n C-M-e

# I want to make this a dead key sequence because by default it will
# scroll vim. -- But what if other applications like emacs need it? It
# doesn't matter. Make it a dead key sequence.
#bind -n C-M-e run true
bind -n C-M-e run "tm saykeyunbound C-M-e M-T"
# bind -n C-M-q run "tm saykeyunbound C-M-q"
bind -n C-M-q run "tm scrape-things"
# bind -n C-M-t run "tm scrape-things-fast"

# tm -te -S -- the -S breaks it. Don't use -S
# The unbuffer was necessary. The problem is with tmux, so I put it here. I also put it inside the tm edit-x-clipboard function to make it more stable
bind C-r run -b     " unbuffer tm -te -d edit-x-clipboard "
bind Enter run -b   " unbuffer tm -te -d edit-x-clipboard "
bind KPEnter run -b " unbuffer tm -te -d edit-x-clipboard "

bind M run -b   " tm -te -d new-script     "
bind N run -b   " tm -te -d new-file       "
# The following 2 are the some
bind M-d run -b " tm -te -d split-and-pipe "
bind C-p run -b "tm -te -d pipec"
bind * run -b   " tm -te -d free-resources "

# This make it so M-Enter starts a capture.
# C-m = the 'Enter' key. Therefore, C-M-m = M-Enter.
unbind -n C-M-m
# bind -n C-M-m send-keys "M-Enter"
# bind -n C-M-m run -b " tm -te -d capture -tyy -clean -editor ec           "

bind A run -b                 " tm -te -d capture -tty -ansi                                              "
bind Y run -b                 " tm -te -d capture -tty -ansi                                              "
bind M-A run -b               " tm -te -d capture -tty -ansi -history                                     "
bind a last-window \; refresh
# bind a run -b               " tm -te -d capture -tty -clean                                             "
bind M-a run -b               " tm -te -d capture -tty -clean -history                                    "
#bind -n M-F9 run -b           " tm -te -d capture -tty -clean -editor 'e -D default -s tmux c' -wrap      "
#bind -n M-F9 run -b           " tm -te -d capture -tty -clean -editor \"e -D default -e '(enable-evil)' c\" -wrap "

# Don't use evil-mode
#bind -n M-F9 run -b "tm -te -d capture -tty -clean -editor ev -wrap"
bind -n M-F9 run -b "tm -te -d capture -tty -clean -editor e -wrap"

#bind -n M-F10 run -b "tm -te -d capture -tty -clean -editor 'e -D default -s tmux c' -session c"
bind -n M-F10 run -b "tm -te -d capture -tty -clean -editor 'e -D default c' -session c "
# bind M-f run -b "tm -te -d capture -tty -clean -filter" # filters
bind M-f run -b "tm scrapep" # filters
bind M-F run -b "tm scrape" # filters
#bind M-u run -b "tm -te -d capture -tty -clean -editor 'e -D default -s tmux c' -filter" # all filters into emacs
bind M-u run -b "tm -te -d capture -tty -clean -editor 'e -D default c' -filter" # all filters into emacs
bind M-v run "tm -te -d capture -tty -clean -history" # not really needed anymore. Can just do an A then a C-M-d
bind M-D run "tm -te -d capture -tty -clean" # ok, so we can't use C-M-d to mean C-d in vim but that's good because we already broke C-M-u.
#bind -n C-M-d run -b "tm -te -d capture -tty -clean -editor 'e -D default -s tmux c'"
#bind -n C-M-d run -b "tm -te -d capture -tty -clean -editor \"e -D default -e '(visual-line-mode -1)' c\""
#bind -n C-M-d run -b "tm -te -d capture -tty -clean -editor nv"

# I really want this to tmux attach this pane somehow, rather than
# simply do this
# Therefore, I need to make a command that starts a new tmux session
# bind M-V run -b "tm -te -d capture -tty -clean -editor vs"
bind M-V run -b "tm-capture-pane-view-vs"

#bind M-s run -b "tm -te -d capture -tty -clean -bottom -editor 'e -D default -s tmux c'" # -b is bottom of emacs
bind M-s run -b "tm -te -d capture -tty -wrap -clean -editor 'sp'" # -b is bottom of emacs


# I shouldn't replace M-1 - M-5
bind M-3 select-layout even-horizontal
# bind M-3 run "tm -te -d capture -tty -clean -history -fzfpreview"
bind M-1 run -b "tm move-to-start"

bind M-0 run -b "tm move-to-end"


#bind -n C-M-w run " tm saykeyunbound C-M-w 'Key is free' "
bind -n C-M-e run " tm saykeyunbound C-M-e 'New key M-T' "
bind V run        " tm saykeyunbound V 'Key is free'     "
bind R run        " tm saykeyunbound V 'Key is free'     "

bind -n F9 run -b " unbuffer tm ranger  "
bind u run -b     " tm -d ranger       "
bind U run -b     " tm -d ranger -dump "


# This steals S-F1, which I want for vim, ranger and emacs
# bind -n F13 run -b "unbuffer tm nw 'tm findrun'" # S-F1

# This can be annoying. I've disabled it. I might want to escape a mode
# and then do a C-g. Keep this disabled.
#bind -n C-M-g run -b "unbuffer tm nw 'tm findrun'"

# This was horrible
# bind M-Space next-layout
bind M-Space run 'tm nextlayout'
# https://mullikine.matomo.cloud/
bind '*' run -b "tm urls-file"
bind '(' run -b "tm dir"
bind ')' run -b "tm src"

# This is inherently slow because it start zsh before running
# I should make a faster script that does not use zsh
# bind -n C-M-r run -b "unbuffer tm -d nw 'tm -d fz-s'"
bind -n C-M-r run -b "tm -f -d nw fz-s"
bind M-R run -b "tm -f -d nw fz-s"

bind J run -b "tm scrape-paths"
bind M-r run -b "tm project-edit"
bind / run -b "tm man"
bind -n C-M-v run "tm visor"
# This is also very annoying
# bind -n C-M-s run "tm search"
# tmux unbind -n C-M-s
bind C-s run "tm search"
# bind -n C-M-d run "tm wrap" # This was fine but atm it's essentially
# the same thing as "tm search". I also accidentally run it
bind C-k run "tm easymotion"
bind M-k run "tm avy"
bind M-K run "tm kill-other"
bind M-j run "tm nv-wrap"
# bind -n C-M-d run -b "ns not implemented 1>/dev/null"
# bind -n C-M-a run "tm avy"

# bind -n C-M-s run "tm tput-search"
bind BSpace run -b "tm -d shortcuts" # backspace
bind M-BSpace run -b "tm open-dirs" # backspace
bind D run -b "tm directories"

# -d is what makes it fast at closing
bind -n M-T run -b "tm -f -d -te -tout -u nw \"tm config\""

# I may have deleted this because it was annoying. try it out again
# This overrode zsh's grep or eack command. Eack had a bad binding.
# Create a zsh menu.
# bind -n C-M-t run -b "tm -u -tout nw \"tm config\""

bind M-, run -b "tm ncmd"

bind M-Y run -b "tm yank-line"
bind C-Y run -b "tm yank-line -from"
bind M-y new-window sh-yank
# bind M-y set set-remain-on-exit off \; neww fish
# bind M-y run -b "tm -te -d capture -tty -clean -nv"


bind '.' run -b "tm -d sps sh-clipboard"
bind -n C-M-w run "tm scrape-filter" # scrape-filter is localhost: only. I need a pane-only one.
# C-M-q is not appropriate for a pane command ( because it is a -n binding )
# bind -n C-M-q run "tm scrapep" # this is pane-only. Hopfully C-M-q is OK. I may need this somewhere
bind < run "tm scrapep" # this is pane-only. Hopfully C-M-q is OK. I may need this somewhere

# I simply don't use this enough
# This is very annoying
# bind -n C-M-f run -b "tm em-click"
# unbind -n C-M-f
bind -n C-M-x run -b "tm click"

# These work
#bind -n C-M-x run -b "tm mousedown"
#bind -n C-M-z run -b "tm mouseup"

## This is broken
# bind -n C-M-x run -b "tm click"
# bind -n C-M-z run -b "tm em-click"

# This works
# bind -n C-M-x run -b "tm mouseclick"

# this works for elinks
# tm mousedown; tm mouseup;

# this does not work for elinks
# bind -n C-M-x run -b "tm mousedown -x"
bind -n C-M-z run -b "tm mouseup -x -r"

# TODO I should translate mouse-1 into mouse-3

# # this works for elinks
# bind -n C-M-x run -b "tm mousedown"
# # This doesn't work for emacs
# bind -n C-M-z run -b "tm mouseup -r"


# bind -n C-M-z run -b "tm mouseup"

# I hit this all the time
# bind -n M-, run -b "tm ncmd"

# do things on events
# set-hook -g after-kill-pane 'select-layout even-horizontal'
# set-hook -g pane-exited 'select-layout even-horizontal'

set-option -sa terminal-overrides ",xterm*:Tc"

# This is how tmux's mouse support works. It doesn't allow you to create
# fake mouse presses, though
bind -n MouseDown1Pane select-pane -t=\; send-keys -M

# bind i run -b "tm asciinema"

# bind-key M-! select-layout even-horizontal
# bind-key M-@ select-layout even-vertical
# bind-key 'M-#' select-layout main-horizontal
# bind-key 'M-$' select-layout main-vertical
# bind-key M-% select-layout tiled

bind 'M-$' run -b "tm-sh-tmux-actions &>/dev/null"