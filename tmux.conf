# vim: ft=tmux:

# spare bindings:
#bind * command-prompt -p ssh_target "set set-remain-on-exit on; neww -n '%1' \"ssh %1\"; set set-remain-on-exit off"
#bind M-d neww -n find-window "tmux-find-run-command.sh"
# bind ^ run "tmux-subsession-ask.sh"
# free emacs/terminal keys
    # C-M-z
#bind B neww -d 'big-xterm-session.sh'

# no longer spare
#bind M-s neww -n "todayfile?" "tmux-todayfile.sh"

# old bindings
#bind J neww 'editor.sh ~/.tmux.conf'

# tmux-tmux-code git commit 648ce2f

bind M-Space next-layout

set -g display-time 2000

set -g buffer-limit 30
set -g set-titles on
set -g set-titles-string "#h #S"
set -g renumber-windows on
set -g word-separators " -_@:=.;()[]/\\{}\"\',"

#set -g history-limit 500
# Have to hope that the glibc memory leak is fixed
#set -g history-limit 999999999
# reduced this incase the reason I'm getting terminal lag is because of this.
#set -g history-limit 10
set -g history-limit 100000
#set -g default-shell '/home/shane/local/bin/zsh'
#set -g default-shell '/bin/bash'
set -g default-shell '/usr/bin/zsh'

set -g set-clipboard on
set -g default-terminal "screen-256color"
setenv -u -g COLUMNS
setenv -u -g LINES
#set -g status-utf8 on # tmux 2.0

set -g mouse on # tmux 2.3

## obsolete since 2015
#set -g mouse-resize-pane on # incompatible with select-window in 1.5
#set -g mouse-select-pane on
#set -g mouse-select-window on
#setw -g c0-change-interval 200  #nicm is going to make a new solution
#setw -g c0-change-trigger 50

# Don't upgrade yet
## mouse mode on
## don't want it on.
#set -g mouse on
#setw -g mode-mouse off
#setw -g mode-mouse copy-mode # this stopped working?? what did it do?
##defaults
##bind -n   MouseDown1Pane select-pane -t=; send-keys -M
##bind -n MouseDown1Status select-window -t=
##bind -n   MouseDrag1Pane copy-mode -M
##bind -n MouseDrag1Border resize-pane -M
#
## mouse mode off
#unbind -n MouseDrag1Pane
#unbind -temacs-copy MouseDrag1Pane

set -g base-index 1
set -g status-interval 30
set -g status-left-length 40
set -g status-right-length 40
#set -g pane-border-bg black
set -g pane-border-bg default
set -g pane-border-fg colour234
#set -g pane-active-border-bg black
set -g pane-active-border-bg default
set -g pane-active-border-fg colour234
set -g pane-active-border-bg colour234
set -g status-right ""
set -g status-left 'F1 #S '
set -g mode-keys emacs # overrides EDITOR
set -g escape-time 1000 # speed up vim (increase on very slow connections) and timeoutlen in vimrc
# Need CWD for the event the session directory is deleted and remade
set -g update-environment "TMUX_NOTES CWD TMUX_PROJECT PYTHONPATH PATH DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY" #LC_TYPE LANG PAGER TMUX
#set -g lock-command "PERL5LIB=/usr/share/perl5/vendor_perl asciiquarium"
# fine to loave this on
#set -g lock-command "tmux-screensaver.sh &>/dev/null"
set -g lock-command "$MYGIT/pipes.sh/pipes.sh -f 100 -s 15 -r 20 -p 2 -t 3"
#set -g lock-command "$MYGIT/pipes.sh/pipes.sh -f 100 -s 15 -r 20 -p 3 -t 3"
#set -g lock-command "$MYGIT/pipes.sh/pipes.sh -f 100 -s 15 -r 20 -p 9 -t 7"
# This will make all sessions start asciiquarium, which is
# unacceptable.
#set -g lock-after-time 5000
#set -g lock-server on

# 160 0xa0 red
# 124 0x7c dark red
# 233 0xe9 dark grey
# 234 0xea 'not as dark' grey
# 235 0xeb 'just readable' grey
# 236 0xec 'more clearly readable' grey
# 244 0xf4 light grey
# 250 0xfa lighter grey        regular windows
# 254 0xfe almost white        subsession window-name
#set -g message-bg black
###set -g message-bg default
###set -g message-fg colour134
###set -g status-right-fg colour124
###set -g status-left-fg colour124
###set -g status-bg black
#set -g status-bg default
###set -g window-status-format "#[fg=colour244]#I #[fg=colour240]#W"
###set -g window-status-current-format "#[fg=colour254]#I #[fg=colour134]#W"
set -g window-status-format "#I #W"
#set -g window-status-current-format "#I #[fg=colour237]#[bg=colour078]#W"
#set -g window-status-current-format "#I #[fg=colour237]#[bg=colour105]#W"
#set -g window-status-current-format "#[bg=colour063]#[fg=colour255]#I #[bg=default]#[fg=default]#W"
set -g window-status-current-format "#[reverse]#I #W#[noreverse]"

setw -g other-pane-width 81
setw -g other-pane-height 30
setw -g clock-mode-colour colour234
setw -g clock-mode-style 24
setw -g mode-bg colour25
setw -g mode-fg colour254
setw -g window-status-fg colour234
setw -g window-status-current-fg white

setw -g alternate-screen on
setw -g word-separators ' -_@/()'
#setw -g utf8 on
setw -g automatic-rename off
setw -g xterm-keys on
setw -g aggressive-resize on

set -g prefix "F1"
bind V capture-pane -J -S -32768 \; run 'FNAME="$BULK/programs/tmux/capture/tmux_capture$(tmux display-message -p "_#H_#S:#I(#W).#P")_date:$(date +%d.%m.%y).txt"; rm "$FNAME"; tmux save-buffer "$FNAME" \; neww -n "vim-capture" "editor.sh -c \"ToggleBrightness\" \"$FNAME\""'
#bind R run 'tmux-edit-capture-full.sh'
bind A run 'tmux-capture.sh -e'
bind M-a run 'tmux-capture.sh -e' # not really needed anymore. Can just do an A then a C-M-d
bind M-s run 'tmux-capture.sh -b'
bind M-v run 'tmux-capture.sh' # not really needed anymore. Can just do an A then a C-M-d
# -p is to start fzf-preview
bind M-3 run 'tmux-capture.sh -p'
bind Y capture-pane -J -S -32768 \; run 'tmux save-buffer $BULK/programs/tmux/capture/tmux_capture$(tmux display-message -p "_#H_#S:#I(#W).#P")_date:$(date +%d.%m.%y).txt'
bind ! run 'tmux-breakpane-once.sh'
bind M-! run 'tmux-break-other-panes.sh'
bind M-b run 'tmux-breakpane.sh'
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind F1 send-prefix #depth 2
bind -n F2 send-prefix #depth 2
bind -n F3 send-prefix \; send-prefix #depth 3
bind -n F4 send-prefix \; send-prefix \; send-prefix #depth 4
bind -n F5 send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 5
bind -n F6 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 6
bind -n F7 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 7
bind -n F8 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 8
bind -n F9 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 9
bind -n F10 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 10
bind -n F11 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 11
bind -n F12 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 12
# run -b is required to prevent xclip from hanging
# unfortunately, xclip is still hanging. i'm not sure if this used to
# happen with neww or not
bind i display-message "copied session name: #{session_name}:" \; run -b 'tmux-copy-session-name.sh'
bind I display-message "copied pane name: #{session_name}:#{window_name}.#{pane_index}" \; run -b 'tmux-copy-pane-name.sh'
#bind K neww 'vimdiff ~/.vimrc ~/.tmux-copy-mode-vimrc'
bind K run "tmux detach-client -s \"$(tmux display-message -p '#{session_name}')\""

#bind -n M-F10 send-keys "Escape" \; send-keys -l "[21;3~"

# $BULK/source/tarball/xterm-278/xtermcap.c
# exception: Home Key is HOME in tmux but HOM in xtermcap
# /usr/share/X11/xkb/symbols/pc
# these actually send C-Up etc because C is still held down. How to
# avoid this?
bind C-M-k send-keys "C-M-k"
bind -n C-M-k send-keys "Up"
bind C-M-j send-keys "C-M-j"
bind -n C-M-j send-keys "Down"
bind C-M-h send-keys "C-M-h"
bind -n C-M-h send-keys "Left"
bind C-M-l send-keys "C-M-l"
bind -n C-M-l send-keys "Right"
# Swapped the order of these. It just feels right having home as C-M-y
bind C-M-b send-keys "C-M-b"
bind -n C-M-b send-keys "END" # Can already use Fn-Right
bind C-M-y send-keys "C-M-y"
bind -n C-M-y send-keys "HOME" # Can already use Fn-Left
#bind -n C-M-h send-keys "END" # Can already use Fn-Right
#bind -n C-M-l send-keys "HOMM" # Can already use Fn-Left
bind C-M-i send-keys "C-M-i"
bind -n C-M-i send-keys "IC" # Insert key. See xterm-278/xtermcap.c
bind C-M-u send-keys "C-M-u"
bind -n C-M-u send-keys "DC" # Delete key. See xterm-278/xtermcap.c
bind C-M-p send-keys "C-M-p"
bind -n C-M-p send-keys "Pageup"
bind C-M-n send-keys "C-M-n"
bind -n C-M-n send-keys "Pagedown"
bind C-M-o send-keys "C-M-o"
bind -n C-M-o send-keys "BSpace" # backspace

# Shift doesn't work like this unfortunately (it's the same binding
# as without shift)
#bind -n C-M-K send-keys Up Up Up
#bind -n C-M-J send-keys Down Down Down
#bind -n C-M-H send-keys Left Left Left
#bind -n C-M-L send-keys Right Right Right
bind -n C-M-Up run "tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up"
bind -n C-M-Down run "tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down"
bind -n C-M-Left run "tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left"
bind -n C-M-Right run "tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right"

# this sort of way doesn't really work and breaks other things
#bind -n C-M-k run "xdotool keyup control;xdotool key up;xdotool keydown control"
#bind -n C-M-j run "xdotool keyup control;xdotool key down;xdotool keydown control"
#bind -n C-M-h run "xdotool keyup control;xdotool key left;xdotool keydown control"
#bind -n C-M-l run "xdotool keyup control;xdotool key right;xdotool keydown control"
#bind -n C-M-p run "xdotool keyup control;xdotool key pageup;xdotool keydown control"
#bind -n C-M-n run "xdotool keyup control;xdotool key pagedown;xdotool keydown control"

bind -n C-Up send-keys "up"
bind -n C-Down send-keys "down"
bind -n C-Left send-keys "left"
bind -n C-Right send-keys "right"
# these only fall through one level of tmux. already catching in vim (so
# already falls through all nested tmux, which is good. therefore,
# disable this
#bind -n M-F1 send F1
#bind -n M-F2 send F2
# This doesn't work
#bind -n M-F3 run "tmux-receive-xclip-full.sh" \; paste-buffer
#bind -n M-F3 run "bash -c \"tmux-receive-xclip.sh; tmux paste-buffer\""

## this seems to work more often?
bind -n M-F3 run "tmux-paste-xclip-chomp.sh"
## Need a version that can paste from remote clipboard
bind M-F4 run "tmux-paste-xclip.sh"
## -n M-F5 is used in vim to kill a buffer and close the window
#bind -n M-F5 run "tmux-receive-xclip-unminimise.sh" \; paste-buffer -r -p

bind -n M-F4 send M-F4
bind -n M-F5 run "tmux-receive-xclip-unminimise.sh" \; paste-buffer -r -p
# DISCARD OK, above seems to work now, but I want M-F5 for vim's number thing.
#bind -n M-F5 send M-F5
bind -n M-F6 send M-F6
bind -n M-F7 send M-F7
bind -n M-F8 send M-F8
bind -n M-F9 send M-F9
bind -n M-F10 send M-F10
bind -n M-F11 send M-F11
bind -n M-F12 send M-F12
bind F1 send F1
bind F2 send F2
bind F3 send F3
bind F4 send F4
bind F5 send F5
bind F6 send F6
bind F7 send F7
bind F8 send F8
bind F9 send F9
bind F10 send F10
bind F11 send F11
bind F12 send F12

#bind -n M-1 send F1
# set -g prefix2 "M-1"
# set -u -g prefix2

# This actually messes up a lot of keys. I can't do this.
#bind -n M-2 send F1
#bind -n M-3 send F2
#bind -n M-4 send F3
#bind -n M-5 send F4
#bind -n M-6 send F5
#bind -n M-7 send F6
#bind -n M-8 send F7
#bind -n M-9 send F8

#tmux unbind -n M-2; tmux unbind -n M-3; tmux unbind -n M-4; tmux unbind -n M-5; tmux unbind -n M-6; tmux unbind -n M-7; tmux unbind -n M-8; tmux unbind -n M-9;

# This fixes the S-F keys
bind -n F13 send S-F1
bind -n F14 send S-F2
bind -n F15 send S-F3
bind -n F16 send S-F4
bind -n F17 send S-F5
bind -n F18 send S-F6
bind -n F19 send S-F7
bind -n F20 send S-F8
bind -n F21 send S-F9
bind -n F22 send S-F10
bind -n F23 send S-F11
bind -n F24 send S-F12

# Why are shifts not working?
# But M-S are
bind -n S-F1 send S-F1
bind -n S-F2 send S-F2
bind -n S-F3 send S-F3
bind -n S-F4 send S-F4
bind -n S-F5 send S-F5
bind -n S-F6 send S-F6
bind -n S-F7 send S-F7
bind -n S-F8 send S-F8
bind -n S-F9 send S-F9
bind -n S-F10 send S-F10
bind -n S-F11 send S-F11
bind -n S-F12 send S-F12
bind -n M-S-F1 send M-S-F1
bind -n M-S-F2 send M-S-F2
bind -n M-S-F3 send M-S-F3
bind -n M-S-F4 send M-S-F4
bind -n M-S-F5 send M-S-F5
bind -n M-S-F6 send M-S-F6
bind -n M-S-F7 send M-S-F7
bind -n M-S-F8 send M-S-F8
bind -n M-S-F9 send M-S-F9
bind -n M-S-F10 send S-F10
bind -n M-S-F11 send S-F11
bind -n M-S-F12 send S-F12
bind r run "tmux-refresh.sh"
# I have successfully cleared the pane completely by killing the
# process so the tmux pane says 'pane is dead' and then repsawning the
# window. Apparently there is no straight-forward way to kill the
# processa tmux pane without closing the pane. Therefore, repspawn the
# pane as a command that will end straight away and then respawn the
# pane as the original command. Make script for this.

# this script is great but it captures all the keys leading up to it
# actually respawning, which is not ideal. find how to fix this. until
# then, use the original method.
bind e respawn-pane -k
#bind e run "tmux-respawn-pane.sh"
#bind e run "tmux-clear-respawn.sh"
bind '$' command-prompt "rename-session \"%%\""
bind ',' command-prompt "rename-window \"%%\""
#bind / command-prompt -p man "split-window \"exec man %%\""
bind / command-prompt -p man "new-window -n man-%1 \"exec man %1\""
#bind / neww -n ref "tmux-reference-select.sh"
#bind ^ command-prompt -p session_name "neww -n \"%1\" \"if [ ! -z \\\"%1\\\" ]; then unset TMUX;tmux attach -t \\\"%1\\\" || tmux new -s \\\"%1\\\"; set -t %1 status-right \\\"\\\"; fi\""
bind T neww -n subsession "tmux-subsession-select.sh"
# why does this crash new version of tmux?
#bind * command-prompt -p ssh_target -I '' "set set-remain-on-exit on; neww -n '%1' \"ssh %1\"; set set-remain-on-exit off"
# 〃
#bind * command-prompt -p ssh_target -I '' "zsh"
# because -I can't take an empty string
bind 0 selectw -t :10 \; refresh
bind 1 selectw -t :1 \; refresh
bind 2 selectw -t :2 \; refresh
bind 3 selectw -t :3 \; refresh
bind 4 selectw -t :4 \; refresh
bind 5 selectw -t :5 \; refresh
bind 6 selectw -t :6 \; refresh
bind 7 selectw -t :7 \; refresh
bind 8 selectw -t :8 \; refresh
bind 9 selectw -t :9 \; refresh
# bind 0 selectw -t :10 \; refresh \; run "tmux-activate-current.sh"
# bind 1 selectw -t :1 \; refresh \; run "tmux-activate-current.sh"
# bind 2 selectw -t :2 \; refresh \; run "tmux-activate-current.sh"
# bind 3 selectw -t :3 \; refresh \; run "tmux-activate-current.sh"
# bind 4 selectw -t :4 \; refresh \; run "tmux-activate-current.sh"
# bind 5 selectw -t :5 \; refresh \; run "tmux-activate-current.sh"
# bind 6 selectw -t :6 \; refresh \; run "tmux-activate-current.sh"
# bind 7 selectw -t :7 \; refresh \; run "tmux-activate-current.sh"
# bind 8 selectw -t :8 \; refresh \; run "tmux-activate-current.sh"
# bind 9 selectw -t :9 \; refresh \; run "tmux-activate-current.sh"
bind P splitw -h -p 38 "e sidenotes.org; tmux kill-pane -t \"$TMUX_PANE\""
#bind P neww -n notes.org "exec tmux-postits-emacsclient.sh"
#bind P splitw -h -p 38 "tmux-postits-emacsclient.sh; tmux kill-pane \"$TMUX_PANE\""
#bind E neww -n notes.txt "exec tmux-postits.sh"
bind E neww -n notes.txt "tmux-vim.sh notes.txt"
bind '#' neww "exec tmux-scratch.sh"
bind '(' neww "exec tmux-directories.sh"
bind ')' neww "exec tmux-source.sh"
bind @ neww "exec tmux-glossary.sh"
#bind E splitw -h -p 38 "exec tmux-postits.sh"
#bind t set -gq status on

# Do it this way from now on "get-tmux-from-pid.sh $$ | awk '{print $2}' | vim -"
# this works find but I never use it anymore so i'll replace with
# something better
#bind t run "tmux display-message -p '#{session_name}' | xargs tmux-omni-session-from-session.sh"

# I use this all the time. Find a different letter for the above.
bind t neww -n subsession "tmux-subsession-select.sh"

#bind Q command-prompt -p 'man what?' "neww -n 'man-%1' -t 'man:' 'man %1'; setw remain-on-exit on"
#bind q display-panes \; run "bash -c \"tmux-pane-status.sh | sponge >(cat) | tmux-neww-run-stdin.sh \\\"cat | vim -\\\"\""
bind q display-panes \; run "tmux-pane-status.sh | pipe-to-tmux-vim.sh"

bind a last-window \; refresh
bind m last-window \; refresh
bind s choose-session \; refresh
bind w choose-window \; refresh

#bind b split-window "tmux lsw | percol --initial-index $(tmux lsw | awk '/active.$/ {print NR-1}') | cut -d':' -f 1 | tr -d '\n' | xargs -0 tmux select-window -t"
#bind B split-window "tmux ls | percol --initial-index $(tmux ls | awk \"/^$(tmux display-message -p '#{session_name}'):/ {print NR-1}\") | cut -d':' -f 1 | tr -d '\n' | xargs -0 tmux switch-client -t"

bind N neww -t localhost_dump: vim \; run "tmux-select.sh localhost_dump: >/dev/null"
bind R run 'tmux-rsync.sh'
bind M neww -d 'tmux-new-script.sh'
bind % splitw -h
bind W command-prompt -I 'Be careful ' -p 'warning:' "neww -n 'Warning' \"echo '%1'|less\"; setw window-status-format '#[fg=colour244]#I #F#[fg=colour226]#W'"
bind X unlinkw
bind x kill-pane
# This doesn't work.
# I need python abstraction for tmux first
#bind x run 'tmux-kill-pane.sh'
# -r means repeatable
#bind -r x run 'tmux-kill-pane.sh'
#bind G neww 'gitk --max-count=30'
bind G neww 'magit'
# See $HOME/reference/programs/tmux/disable-flow-control.txt
#bind M neww -n 'mc' 'stty stop undef; stty start undef;mc'
bind S run 'goto-monitor.sh'
# No longer works. Deleted cpubars
#bind H neww -n 'ttop' 'stty stop undef; stty start undef;ttop'
bind BSpace neww -n "shortcuts..." "tmux-shortcuts.sh" # backspace
bind C-M-t neww -n "files..." "tmux-files.sh" # C-BSpace
bind D neww -n "shortcuts..." "tmux-shortcuts.sh"
bind Space neww -n "fs-notes..." "get-fs-notes.sh \"$(pwd)\"|less -S"
# TMUX_PROJECT environment variable. Put before tmux_s
#bind -n C-M-t neww -n "find-in-project..." \; send-keys "vgrep -i -- \"\""
#bind C-M-t neww -n "find-in-project..." \; send-keys "vgrep -i -- \"\""
#bind -n C-M-t neww -n "find-in-project..." "tmux-project-grep.sh" # clashes with zsh
#bind M-T neww -n "find-in-project..." "tmux-project-grep.sh" # clashes with zsh
# This is inherently slow because it start zsh before running
# I should make a faster script that does not use zsh
bind -n C-M-r run -b "tmux-vim-script.sh 1>/dev/null 2>/dev/null"
bind M-R run -b "tmux-vim-script.sh 1>/dev/null 2>/dev/null"
bind -n C-M-e neww -n tmux-config "tmux-vim-config.sh"
bind -n C-M-w neww -n "ws document..." "tmux-ws-document.sh"
# disabled
# Disable this until it works again
# Maybe I need emacs.
#bind -n C-M-d run 'tmux-edit-capture-full.sh' # ok, so we can't use C-M-d to mean C-d in vim but that's good because we already broke C-M-u.
bind -n C-M-v run 'tmux-visor.sh'
#bind -n C-M-s run 'tmux-search.sh'
# can't use &> because it's sh? NOT bash
bind -n C-M-s run 'tmux-tput-search.sh >/dev/null 2>/dev/null'
# shift versions
bind M-E neww -n "edit config..." "tmux-vim-config.sh"
bind M-W neww -n "ws document..." "tmux-ws-document.sh"
bind M-D run 'tmux-edit-capture-full2.sh' # ok, so we can't use C-M-d to mean C-d in vim but that's good because we already broke C-M-u.
#bind \ neww -n "open vim..." "tmux-vim2.sh"
bind \ run "tmux-vim2-from-session.sh"
bind PgUp neww
bind PgDn neww
bind Home neww
bind End neww
# set-remain-on-exit needs to be set to off everywhere
bind y set set-remain-on-exit off \; neww
#bind Y set set-remain-on-exit off \; neww fish
bind M-y set set-remain-on-exit off \; neww fish
#get-dump-dir.sh
#bind u set set-remain-on-exit off \; neww -n 'ranger' 'stty stop undef; stty start undef;ranger'
#bind U set set-remain-on-exit off \; neww -n 'ranger' 'stty stop undef; stty start undef;tmux-go-dump.sh'
bind u run -b "tmux-ranger.sh 1>/dev/null 2>/dev/null"
bind U run -b "tmux-go-dump.sh 1>/dev/null 2>/dev/null"
#bind Z neww -n fuzzy \; run "sleep 1; tmux send-keys C-q"

bind -r C-k resize-pane -U 2
bind -r C-j resize-pane -D 2
bind -r C-h resize-pane -L 4
bind -r C-l resize-pane -R 4
bind -r M-Up resize-pane -U 10
bind -r M-Down resize-pane -D 10
bind -r M-Left resize-pane -L 10
bind -r M-Right resize-pane -R 10
bind -r n run 'tmux-next-window.sh'
bind -r p run 'tmux-previous-window.sh'
bind -r o select-pane -t :.+
#bind -r ( switch-client -p \; refresh
#bind -r ) switch-client -n \; refresh
bind -r O run 'tmux lastp; target=$(tmux lsp | grep -Po "^[^:]+(?=.*active)"); tmux lastp; tmux swapp -s "$target"'
# This isn't safe
# bind -r C-q run 'stopemacsdaemon;killall -u $USER autossh ssh sshd tmux "tmux: server"'
bind C-q run '$VAS/projects/scripts/split-and-fzf-select-vim.sh'
bind -n C-q run '$VAS/projects/scripts/split-and-fzf-select-vim.sh'

# Unfortulately, can't start with a ranger command such as filter or
# flat
bind C-M-q run '$VAS/projects/scripts/split-and-ranger-notes-flat-1.sh'
bind -n C-M-q run '$VAS/projects/scripts/split-and-ranger-notes-flat-1.sh'

#bind -n C-M-q neww -n "find-in-project..." "tmux-vim-project-search.sh"
#bind M-Q neww -n "find-in-project..." "tmux-vim-project-search.sh"

unbind -t emacs-copy M-R
bind -t emacs-copy M-e bottom-line
bind -t emacs-copy M-t top-line

bind -n C-l send "C-l" \; clear-history

bind \; command-prompt
bind : last-pane
bind ` run "tmux-calc.sh"
bind '~' run "wa-ask.sh"

# #S Session name
# #I Current window index
# #P Current pane index
bind C-p pipe-pane 'cat >> $HOME/computer/programs/tmux/capture/tmux_pipe_#H_#S:#I\(#W\).#P_date:`date +%d.%m.%y`.tty'

# instead of the following, use a nested tmux and stty columns 81
#bind M-j run 'tmux-jira.sh; tmux setw -q force-width 81'
#bind M-j run 'tmux-jira.sh'
#bind M-w run "tmux display-message -p '#{session_name}:#{window_name}' | xargs tmux-run-command-from-file-from-session.sh"
bind M-w neww "$VAS/projects/scripts/run-search-command-copy.sh"
bind M-c command-prompt -p "copy from:" "run 'tmux-copy-remote.sh %1'"
#bind M-v command-prompt -p "copy to:" "run 'tmux-send-remote.sh %1'"
# tmux → xclip
bind v run "tmux-send-xclip.sh"
# xclip → tmux
bind c run "tmux-receive-xclip.sh"
#bind M-g splitw -d -h "vim -R /home/shane/ws/dvorak/german/dvorak-german.txt"
#bind M-m splitw -d -h "vim -R /home/shane/ws/colemak/colemak.txt"
bind C-n run "tmux-paste-keys.sh"
bind C-v run "bash -c \"tmux-receive-xclip.sh; tmux paste-buffer\""
# Just paste it! Don't open vim.
#bind -n M-F3 run "tmux-paste-xclip-chomp.sh"
bind z run -b "tmux-pasteclip.sh -j"
bind Z run -b "tmux-pasteclip.sh"
bind M-e neww "tmux-edit-session.sh"
bind C-e neww "tmux save-buffer -|vipe|tee >(tmux delete-buffer)|tmux load-buffer -"
#bind Enter run "tmux-vim-xclip.sh"
#bind C-r run "tmux-vim-xclip.sh"
# -t sessionname:0.4 -k 'some -new command'
# This is horrible!
#bind Z respawn-pane -k "tmux-vim-xclip.sh"
bind -n KPEnter send-keys "Enter"
bind KPEnter set set-remain-on-exit off \; neww -n edit_clipboard "tmux-vim-xclip.sh"
bind Enter set set-remain-on-exit off \; neww -n edit_clipboard "tmux-vim-xclip.sh"
bind C-r neww -n edit_clipboard "tmux-vim-xclip.sh"
bind H command-prompt "select-window -t '%%'"
#bind F run "tmux-ff.sh"
bind F neww -n find-subsession "tmux-find.sh"
bind M-i run "tmux-select.sh localhost:mru.0 >/dev/null; tmux respawn-pane -k -t localhost:mru.0; "
#bind F command-prompt "find-window '%%'"
# using xargs means no race conditions for session_name

bind M-f run "tmux display-message -p '#{session_name}' | xargs find-window-from-session.sh"
# this starts much faster
bind f run "tmux display-message -p '#{session_name}' | xargs find-window-from-session-noactivate.sh"
# than this
#bind f neww -n find-window tmux-ask-find-window.sh
# -r means repeat
#bind -r & kill-window
bind -r & run 'tmux-kill-window.sh'
bind M-6 neww -n kill-subsessions "tmux-kill-subsessions.sh"
bind M-7 command-prompt -p "kill-session #S?" kill-session
bind M-h run "tmux-base-here.sh"
bind M-l run "tmux-base-localhost.sh"
bind M-t neww -n subsession "tmux-omni-session.sh"
#bind M-p run 'tmux-pipe-pane-full.sh'
#bind M-p pipe-pane -o "ssh -o ControlPath=/dev/null zee 'ncat -k -l 8458'"
# rearrange windows
#bind -n C-S-Left swap-window -t -1
#bind -n C-S-Right swap-window -t +1
unbind -n C-S-Left
unbind -n C-S-Right
bind -r C-S-Left swap-window -t -1
bind -r C-S-Right swap-window -t +1
bind ? neww -n tmux-key-bindings "tmux list-keys|VIMEXTRA=\" -c \\\"set ft=tmux\\\"\" lesseditor.sh"

# Need to make a help binding that does different things depending on
# what is running in the current pane.
#bind M-/ neww -n vim-maps "vim-show-maps.sh"
#bind M-/ command-prompt -p vimhelp "new-window -n vimhelp-%1 \"exec vimhelp %1\""
bind M-/ neww -n vimhelp "vimhelpfzf"

# Doesn't like commands that had \" in them.
bind + run 'tmux neww -n "#W" "#{pane_start_command}"'
#bind + run "tmux neww \"$(tmux display-message -p '#{pane_start_command}')\""

#bind g set -gq status off
#bind g run "exec tmux-attach-mirror.sh" # this thing has been driving me insane

#bind -n C-M-m neww -n "autotest-menu" "autotest-menu.sh"

# not sure if I use this
#bind -n F13 neww -t localhost: -n "run" 'tmux-run.sh'
# This is S-F2 in putty and xterm. Keep it disabled because I want
# to be able to easily change from dvorak to querty.
bind -n F14 neww -n "ff-slmenu" "ff-slmenu"
    # F14 is actually run by pressing Command-Shift-F and xmonad sends
    # an F14 (S-F2)

bind M-S neww -n "edit-fs-notes..." "tmux-fs-notes.sh \"$(pwd)\""
# this binding is used by emacs' regex search.
#bind -n M-C-s neww -n "edit-fs-notes..." "tmux-fs-notes.sh \"$(pwd)\""

#bind M-k run "exec tmux-zsh-rec.sh"
#bind M-u run "exec tmux-zsh-view-recs.sh"

# Use one of these, not both
bind -n C-M-g neww -n "run-command" "tmux-run-command.sh"

bind M-r neww -n project-edit "project-edit.sh"

# Fixes emacs cursor in a nested tmux session
set -ag terminal-overrides ',screen*:cvvis=\E[34l\E[?25h'

bind J run 'tmux-scrape-path.sh'

# This helps -- I think?
bind -n MouseDown2Status send-keys -M
bind -n MouseUp2Status send-keys -M
bind -n MouseDrag2Status send-keys -M
bind -n MouseDown3Status send-keys -M
bind -n MouseUp3Status send-keys -M
bind -n MouseDrag3Status send-keys -M
bind -n WheelUpStatus send-keys -M
bind -n WheelDownStatus send-keys -M

bind -n C-MouseDown2Status send-keys -M
bind -n C-MouseUp2Status send-keys -M
bind -n C-MouseDrag2Status send-keys -M
bind -n C-MouseDown3Status send-keys -M
bind -n C-MouseUp3Status send-keys -M
bind -n C-MouseDrag3Status send-keys -M
bind -n C-WheelUpStatus send-keys -M
bind -n C-WheelDownStatus send-keys -M

bind -n S-MouseDown2Status send-keys -M
bind -n S-MouseUp2Status send-keys -M
bind -n S-MouseDrag2Status send-keys -M
bind -n S-MouseDown3Status send-keys -M
bind -n S-MouseUp3Status send-keys -M
bind -n S-MouseDrag3Status send-keys -M
bind -n S-WheelUpStatus send-keys -M
bind -n S-WheelDownStatus send-keys -M

#bind "'" run "tmux-neww-run.sh open-note.sh 1>/dev/null 2>/dev/null &"
# This is no ranger doesn't segfault.
# splitw is too fast on its own. I need a small wait.
# Actually, the problem is that ranger can't be split while it's
# generating the preview list. It's nothing to do with this.
# Will trapping SIGWINCH in scope.sh fix this?
# This makes the problem slightly better anyway
bind '"' run -b tmux-split-here.sh

# tmux-neww-run.sh
#     Whenever I use this, I must have a & inside of tmux.conf anyway or it will cause a hang
bind "'" run "tmux-neww-run.sh 'find-and-vim-path-from-notes.sh' 1>/dev/null 2>/dev/null &"

#bind C linkw -d -t localhost_current: \; selectw -t 1
# can't use run because then I don't get TMUX_PANE
#bind C neww -d 'small-xterm-session.sh & disown; sleep 1'
bind C run "tmux-neww-run.sh 'cscope; echo cscope finished; pressanykey.sh' 1>/dev/null 2>/dev/null"

#bind -n M-, neww -n 'run-command' "cmd=\"$(get-notes-commands.sh | LINES=20 fzf-preview --sort --sync)\"; tmux-run-hist-command.sh \"$cmd\""
# Works fine -- doesn't freeze
bind -n M-, neww -n 'run-command' "get-notes-commands.sh | fzf-nopreview --sort --sync | xargs tmux-run-hist-command.sh"

bind * run 'tmux-rename-window-to-current-command.sh'

bind = run 'tmux-select-last-window.sh'

#bind M-g neww -n debug-bash 'bash -x -i -c exit 2>&1 | timestampify.pl | vim -' \; neww -n debug-zsh 'zsh -x -i -c exit 2>&1 | timestampify.pl | vim -' \; neww 'strace /usr/bin/id 2>&1 | timestampify.pl | vim -'

bind M-g run -b 'run-debug-windows.sh'

bind L lock-session -t localhost:

bind g run -b "tmux-select.sh localhost_ws_google:google.txt >/dev/null"
bind G run -b "tmux-select.sh localhost_current_mygit: >/dev/null"
bind M-m neww 'magit'

bind -n F9 run -b "tmux-ranger.sh 1>/dev/null 2>/dev/null"

# M-BSpace is delete word. I can't use this.
#bind -n M-BSpace neww -n "recent..." "tmux-neww-run.sh tmux-recent.sh"
bind -n C-M-f neww -n "recent..." "tmux-neww-run.sh tmux-recent.sh"
# I'm not using C-M-f atm so use it.
#bind -n C-M-f run 'tmux-jump-v2.sh'

#bind B neww -d 'big-xterm-session.sh'
