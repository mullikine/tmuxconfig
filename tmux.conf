# vim: ft=tmux:

# tmux-tmux-code git commit 648ce2f

# search window name
bind "'" command-prompt -p index "select-window -t ':%%'"

bind M-Space next-layout

set -g display-time 2000

set -g buffer-limit 30
set -g set-titles on
set -g set-titles-string "#h #S"
set -g renumber-windows on
set -g word-separators " -_@:=.;()[]/\\{}\"\',"

#set -g history-limit 500
# Have to hope that the glibc memory leak is fixed
set -g history-limit 999999999
#set -g default-shell '/home/shane/local/bin/zsh'
#set -g default-shell '/bin/bash'
set -g default-shell '/usr/bin/zsh'

set -g set-clipboard on
set -g default-terminal "screen-256color"
setenv -u -g COLUMNS
setenv -u -g LINES
set -g status-utf8 on

# obsolete since 2015
set -g mouse-resize-pane on # incompatible with select-window in 1.5
set -g mouse-select-pane on
set -g mouse-select-window on
setw -g c0-change-interval 200  #nicm is going to make a new solution
setw -g c0-change-trigger 50

# Don't upgrade yet
## mouse mode on
## don't want it on.
#set -g mouse on
#setw -g mode-mouse off
#setw -g mode-mouse copy-mode # this stopped working?? what did it do?
##defaults
##bind -n   MouseDown1Pane select-pane -t=; send-keys -M
##bind -n MouseDown1Status select-window -t=
##bind -n   MouseDrag1Pane copy-mode -M
##bind -n MouseDrag1Border resize-pane -M
#
## mouse mode off
#unbind -n MouseDrag1Pane
#unbind -temacs-copy MouseDrag1Pane

set -g base-index 1
set -g status-interval 30
set -g status-left-length 40
set -g status-right-length 40
#set -g pane-border-bg black
set -g pane-border-bg default
set -g pane-border-fg colour234
#set -g pane-active-border-bg black
set -g pane-active-border-bg default
set -g pane-active-border-fg colour234
set -g pane-active-border-bg colour234
set -g status-right ""
set -g status-left '#S '
set -g mode-keys emacs # overrides EDITOR
set -g escape-time 1000 # speed up vim (increase on very slow connections) and timeoutlen in vimrc
# Need CWD for the event the session directory is deleted and remade
set -g update-environment "TMUX_NOTES CWD TMUX_PROJECT PYTHONPATH PATH DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY" #LC_TYPE LANG PAGER TMUX
#set -g lock-command "PERL5LIB=/usr/share/perl5/vendor_perl asciiquarium"
set -g lock-command "tmux-screensaver.sh &>/dev/null"
# this will make all sessions start asciiquarium, which is unacceptable
#set -g lock-after-time 5000
#set -g lock-server on

# 160 0xa0 red
# 124 0x7c dark red
# 233 0xe9 dark grey
# 234 0xea 'not as dark' grey
# 235 0xeb 'just readable' grey
# 236 0xec 'more clearly readable' grey
# 244 0xf4 light grey
# 250 0xfa lighter grey        regular windows
# 254 0xfe almost white        subsession window-name
#set -g message-bg black
set -g message-bg default
set -g message-fg colour134
set -g status-right-fg colour124
set -g status-left-fg colour124
#set -g status-bg black
set -g status-bg default
set -g window-status-format "#[fg=colour244]#I #[fg=colour240]#W"
set -g window-status-current-format "#[fg=colour244]#I #[fg=colour134]#W"

setw -g other-pane-width 81
setw -g other-pane-height 30
setw -g clock-mode-colour colour234
setw -g clock-mode-style 24
setw -g mode-bg colour25
setw -g mode-fg colour254
setw -g window-status-fg colour234
setw -g window-status-current-fg white

setw -g alternate-screen on
setw -g word-separators ' -_@/()'
setw -g utf8 on
setw -g automatic-rename off
setw -g xterm-keys on
setw -g aggressive-resize on

set -g prefix "F1"
bind V capture-pane -J -S -32768 \; run 'FNAME="$BULK/programs/tmux/capture/tmux_capture$(tmux display-message -p "_#H_#S:#I(#W).#P")_date:$(date +%d.%m.%y).txt"; rm "$FNAME"; tmux save-buffer "$FNAME" \; neww -n "vim-capture" "fastvim -c \"ToggleBrightness\" \"$FNAME\""'
bind R run 'tmux-edit-capture-full.sh'
bind A run 'tmux-capture.sh -e'
bind M-a run 'tmux-capture.sh' # not really needed anymore. Can just do an A then a C-M-d
bind Y capture-pane -J -S -32768 \; run 'tmux save-buffer $BULK/programs/tmux/capture/tmux_capture$(tmux display-message -p "_#H_#S:#I(#W).#P")_date:$(date +%d.%m.%y).txt'
bind ! run 'tmux-breakpane-once.sh'
bind M-! run 'tmux-break-other-panes.sh'
bind M-b run 'tmux-breakpane.sh'
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind F1 send-prefix #depth 2
bind -n F2 send-prefix #depth 2
bind -n F3 send-prefix \; send-prefix #depth 3
bind -n F4 send-prefix \; send-prefix \; send-prefix #depth 4
bind -n F5 send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 5
bind -n F6 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 6
bind -n F7 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 7
bind -n F8 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 8
bind -n F9 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 9
bind -n F10 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 10
bind -n F11 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 11
bind -n F12 send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix \; send-prefix #depth 12
# run -b is required to prevent xclip from hanging
# unfortunately, xclip is still hanging. i'm not sure if this used to
# happen with neww or not
bind i display-message "copied session name: #{session_name}:" \; run -b 'tmux-copy-session-name.sh'
bind I display-message "copied pane name: #{session_name}:#{window_name}.#{pane_index}" \; run -b 'tmux-copy-pane-name.sh'
bind J neww 'fastvim ~/.tmux.conf'
#bind K neww 'vimdiff ~/.vimrc ~/.tmux-copy-mode-vimrc'
bind K run "tmux detach-client -s \"$(tmux display-message -p '#{session_name}')\""

# $BULK/source/tarball/xterm-278/xtermcap.c
# exception: Home Key is HOME in tmux but HOM in xtermcap
# /usr/share/X11/xkb/symbols/pc
# these actually send C-Up etc because C is still held down. How to
# avoid this?
bind -n C-M-k send-keys "Up"
bind -n C-M-j send-keys "Down"
bind -n C-M-h send-keys "Left"
bind -n C-M-l send-keys "Right"
bind -n C-M-y send-keys "END" # Can already use Fn-Right
bind -n C-M-b send-keys "HOME" # Can already use Fn-Left
#bind -n C-M-h send-keys "END" # Can already use Fn-Right
#bind -n C-M-l send-keys "HOMM" # Can already use Fn-Left
bind -n C-M-i send-keys "IC" # Insert key. See xterm-278/xtermcap.c
bind -n C-M-u send-keys "DC" # Delete key. See xterm-278/xtermcap.c
bind -n C-M-p send-keys "Pageup"
bind -n C-M-n send-keys "Pagedown"
bind -n C-M-o send-keys "BSpace"

# Shift doesn't work like this unfortunately (it's the same binding
# as without shift)
#bind -n C-M-K send-keys Up Up Up
#bind -n C-M-J send-keys Down Down Down
#bind -n C-M-H send-keys Left Left Left
#bind -n C-M-L send-keys Right Right Right
bind -n C-M-Up run "tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up; sleep 0.05; tmux send-keys Up"
bind -n C-M-Down run "tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down; sleep 0.05; tmux send-keys Down"
bind -n C-M-Left run "tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left; sleep 0.05; tmux send-keys Left"
bind -n C-M-Right run "tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right; sleep 0.05; tmux send-keys Right"

# this sort of way doesn't really work and breaks other things
#bind -n C-M-k run "xdotool keyup control;xdotool key up;xdotool keydown control"
#bind -n C-M-j run "xdotool keyup control;xdotool key down;xdotool keydown control"
#bind -n C-M-h run "xdotool keyup control;xdotool key left;xdotool keydown control"
#bind -n C-M-l run "xdotool keyup control;xdotool key right;xdotool keydown control"
#bind -n C-M-p run "xdotool keyup control;xdotool key pageup;xdotool keydown control"
#bind -n C-M-n run "xdotool keyup control;xdotool key pagedown;xdotool keydown control"

bind -n C-Up send-keys "up"
bind -n C-Down send-keys "down"
bind -n C-Left send-keys "left"
bind -n C-Right send-keys "right"
# these only fall through one level of tmux. already catching in vim (so
# already falls through all nested tmux, which is good. therefore,
# disable this
#bind -n M-F1 send F1
#bind -n M-F2 send F2
# This doesn't work
#bind -n M-F3 run "tmux-receive-xclip-full.sh" \; paste-buffer
#bind -n M-F3 run "bash -c \"tmux-receive-xclip.sh; tmux paste-buffer\""
# this seems to work more often?
bind -n M-F3 run "tmux-receive-xclip.sh" \; paste-buffer
# Need a version that can paste from remote clipboard
bind M-F4 run "tmux-receive-xclip.sh" \; paste-buffer
#bind -n M-F4 send F4
#bind -n M-F5 send F5
#bind -n M-F6 send F6
#bind -n M-F7 send F7
#bind -n M-F8 send F8
#bind -n M-F9 send F9
#bind -n M-F10 send F10
#bind -n M-F11 send F11
#bind -n M-F12 send F12
bind F1 send F1
bind F2 send F2
bind F3 send F3
bind F4 send F4
bind F5 send F5
bind F6 send F6
bind F7 send F7
bind F8 send F8
bind F9 send F9
bind F10 send F10
bind F11 send F11
bind F12 send F12
bind r run "tmux-refresh.sh"
bind e respawnp -k \; refresh
bind '$' command-prompt "rename-session \"%%\""
bind ',' command-prompt "rename-window \"%%\""
#bind / command-prompt -p man "split-window \"exec man %%\""
bind / command-prompt -p man "new-window -n man-%1 \"exec man %1\""
#bind / neww -n ref "tmux-reference-select.sh"
#bind ^ command-prompt -p session_name "neww -n \"%1\" \"if [ ! -z \\\"%1\\\" ]; then unset TMUX;tmux attach -t \\\"%1\\\" || tmux new -s \\\"%1\\\"; set -t %1 status-right \\\"\\\"; fi\""
bind T neww -n subsession "tmux-subsession-select.sh"
bind ^ run "tmux-subsession-ask.sh"
# why does this crash new version of tmux?
#bind * command-prompt -p ssh_target -I '' "set set-remain-on-exit on; neww -n '%1' \"ssh %1\"; set set-remain-on-exit off"
# 〃
#bind * command-prompt -p ssh_target -I '' "zsh"
# because -I can't take an empty string
bind * command-prompt -p ssh_target "set set-remain-on-exit on; neww -n '%1' \"ssh %1\"; set set-remain-on-exit off"
bind 0 selectw -t :10 \; refresh
bind 1 selectw -t :1 \; refresh
bind 2 selectw -t :2 \; refresh
bind 3 selectw -t :3 \; refresh
bind 4 selectw -t :4 \; refresh
bind 5 selectw -t :5 \; refresh
bind 6 selectw -t :6 \; refresh
bind 7 selectw -t :7 \; refresh
bind 8 selectw -t :8 \; refresh
bind 9 selectw -t :9 \; refresh
#bind P neww "exec tmux-postits-emacsclient.sh"
bind P splitw -h -p 38 "exec tmux-postits-emacsclient.sh"
bind E neww -n notes.txt "exec tmux-postits.sh"
bind '#' neww "exec tmux-scratch.sh"
bind '(' neww "exec tmux-directories.sh"
bind ')' neww "exec tmux-source.sh"
bind @ neww "exec tmux-glossary.sh"
#bind E splitw -h -p 38 "exec tmux-postits.sh"
#bind t set -gq status on
#bind t neww -n subsession "tmux-subsession-select.sh"
bind t neww -n subsession "tmux-omni-session.sh"
bind Q command-prompt -p 'man what?' "neww -n 'man-%1' -t 'man:' 'man %1'; setw remain-on-exit on"
bind a last-window \; refresh
bind m last-window \; refresh
bind s choose-session \; refresh
bind w choose-window \; refresh
bind N neww fastvim
bind % splitw -h
bind "\"" splitw -v
bind W command-prompt -I 'Be careful ' -p 'warning:' "neww -n 'Warning' \"echo '%1'|less\"; setw window-status-format '#[fg=colour244]#I#F#[fg=colour226]#W'"
bind X unlinkw
bind x kill-pane
bind C linkw -d -t localhost_current: \; selectw -t 1
bind G neww 'gitk --max-count=30'
# See $HOME/reference/programs/tmux/disable-flow-control.txt
bind M neww -n 'mc' 'stty stop undef; stty start undef;mc'
bind u neww -n 'ranger' 'stty stop undef; stty start undef;ranger'
bind S run 'tmux-select.sh localhost_ws_monitor:htop; tmux respawn-window -k -t localhost_ws_monitor:htop; tmux send-keys -t localhost_ws_monitor:htop.0 j'
# No longer works. Deleted cpubars
#bind H neww -n 'ttop' 'stty stop undef; stty start undef;ttop'
bind BSpace neww -n "shortcuts..." "tmux-shortcuts.sh"
bind C-M-t neww -n "files..." "tmux-files.sh" # C-BSpace
bind D neww -n "shortcuts..." "tmux-shortcuts.sh"
bind Space neww -n "fs-notes..." "get-fs-notes.sh \"$(pwd)\"|less -S"
# TMUX_PROJECT environment variable. Put before tmux_s
#bind -n C-M-t neww -n "find-in-project..." \; send-keys "vgrep -i -- \"\""
#bind C-M-t neww -n "find-in-project..." \; send-keys "vgrep -i -- \"\""
#bind -n C-M-t neww -n "find-in-project..." "tmux-project-grep.sh" # clashes with zsh
#bind M-T neww -n "find-in-project..." "tmux-project-grep.sh" # clashes with zsh
bind -n C-M-q neww -n "find-in-project..." "tmux-vim-project-search.sh"
bind M-Q neww -n "find-in-project..." "tmux-vim-project-search.sh"
bind -n C-M-r neww -n "edit script..." "tmux-vim-script.sh"
bind M-R neww -n "edit script..." "tmux-vim-script.sh"
bind -n C-M-e neww -n "edit config..." "tmux-vim-config.sh"
bind -n C-M-w neww -n "ws document..." "tmux-ws-document.sh"
bind -n C-M-d run 'tmux-edit-capture-full.sh' # ok, so we can't use C-M-d to mean C-d in vim but that's good because we already broke C-M-u.
bind -n C-M-f run 'tmux-jump.sh'
# shift versions
bind M-E neww -n "edit config..." "tmux-vim-config.sh"
bind M-W neww -n "ws document..." "tmux-ws-document.sh"
bind M-D run 'tmux-edit-capture-full.sh' # ok, so we can't use C-M-d to mean C-d in vim but that's good because we already broke C-M-u.
bind \ neww -n "open vim..." "tmux-vim2.sh"
bind PgUp neww
bind PgDn neww
bind Home neww
bind End neww
bind y neww
bind U neww -n tasks "bash -lc 'tmux-task.sh $(tmux display -p \"#S\")-tw `pwd`'"
#bind Z neww -n fuzzy \; run "sleep 1; tmux send-keys C-q"

bind -r C-k resize-pane -U 2
bind -r C-j resize-pane -D 2
bind -r C-h resize-pane -L 4
bind -r C-l resize-pane -R 4
bind -r M-Up resize-pane -U 10
bind -r M-Down resize-pane -D 10
bind -r M-Left resize-pane -L 10
bind -r M-Right resize-pane -R 10
bind -r n next-window \; refresh
bind -r p previous-window \; refresh
bind -r o select-pane -t :.+
#bind -r ( switch-client -p \; refresh
#bind -r ) switch-client -n \; refresh
bind -r O run 'tmux lastp; target=$(tmux lsp | grep -Po "^[^:]+(?=.*active)"); tmux lastp; tmux swapp -s "$target"'
bind -r C-q run 'stopemacsdaemon;killall -u $USER autossh ssh sshd tmux'

unbind -t emacs-copy M-R
bind -t emacs-copy M-e bottom-line
bind -t emacs-copy M-t top-line

bind -n C-l send "C-l" \; clear-history

bind \; command-prompt
bind : last-pane
bind ` run "tmux-calc.sh"

# #S Session name
# #I Current window index
# #P Current pane index
bind C-p pipe-pane 'cat >> $HOME/computer/programs/tmux/capture/tmux_pipe_#H_#S:#I\(#W\).#P_date:`date +%d.%m.%y`.tty'

# instead of the following, use a nested tmux and stty columns 81
#bind M-j run 'tmux-jira.sh; tmux setw -q force-width 81'
bind M-j run 'tmux-jira.sh'
bind M-c command-prompt -p "copy from:" "run 'tmux-copy-remote.sh %1'"
bind M-v command-prompt -p "copy to:" "run 'tmux-send-remote.sh %1'"
# tmux → xclip
bind v run "tmux-send-xclip.sh"
# xclip → tmux
bind c run "tmux-receive-xclip.sh"
bind M-g splitw -d -h "vim -R /home/shane/ws/dvorak/german/dvorak-german.txt"
bind M-m splitw -d -h "vim -R /home/shane/ws/colemak/colemak.txt"
bind C-n run "tmux-paste-keys.sh"
bind C-v run "bash -c \"tmux-receive-xclip.sh; tmux paste-buffer\""
bind z neww "echo -n ""|vipe|head -c -1|tmux load-buffer -\;nohup zsh -c \"DISPLAY=:0 TMUX_PANE=$(tmux display-message -p '#{pane_id}') tmux paste-buffer\""
bind M-e neww "fastvim .tmux.sh"
bind C-e neww "tmux save-buffer -|EDITOR=fastvim vipe|tee >(tmux delete-buffer)|tmux load-buffer -"
#bind Enter run "tmux-vim-xclip.sh"
#bind C-r run "tmux-vim-xclip.sh"
# -t sessionname:0.4 -k 'some -new command'
bind Z respawn-pane -k "tmux-vim-xclip.sh"
bind -n KPEnter send-keys "Enter"
bind KPEnter neww -n edit_clipboard "tmux-vim-xclip.sh"
bind Enter neww -n edit_clipboard "tmux-vim-xclip.sh"
bind C-r neww -n edit_clipboard "tmux-vim-xclip.sh"
bind F command-prompt "find-window '%%'"
bind H command-prompt "select-window -t '%%'"
#bind F run "tmux-ff.sh"
bind f neww -n find-subsession "tmux-find.sh"
#bind & command-prompt -p "kill-window #W?" kill-window
bind -r & kill-window
bind M-6 neww -n kill-subsessions "tmux-kill-subsessions.sh"
bind M-7 command-prompt -p "kill-session #S?" kill-session
bind M-h run "tmux-base-here.sh"
bind M-l run "tmux-base-localhost.sh"
bind M-t neww -n "todayfile?" "tmux-todayfile.sh"
#bind M-p run 'tmux-pipe-pane-full.sh'
#bind M-p pipe-pane -o "ssh -o ControlPath=/dev/null zee 'ncat -k -l 8458'"
# rearrange windows
#bind -n C-S-Left swap-window -t -1
#bind -n C-S-Right swap-window -t +1
unbind -n C-S-Left
unbind -n C-S-Right
bind -r C-S-Left swap-window -t -1
bind -r C-S-Right swap-window -t +1
bind ? neww -n tmux-keys "tmux list-keys|VIMEXTRA=\" -c \\\"set ft=tmux\\\"\" vimpager"
bind M-/ neww -n vim-maps "vim-show-maps.sh"


# Doesn't like commands that had \" in them.
bind + run 'tmux neww -n "#W" "#{pane_start_command}"'
#bind + run "tmux neww \"$(tmux display-message -p '#{pane_start_command}')\""

#bind g set -gq status off
bind g run "exec tmux-attach-mirror.sh"

bind -n C-M-m neww -n "autotest-menu" "autotest-menu.sh"
